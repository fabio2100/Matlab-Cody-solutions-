function [y1,xf1,xf2] = ts1delay(x1,x2,xi1,xi2)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Mar-2019 19:56:53.
%
% [y1,xf1,xf2] = myNeuralNetworkFunction(x1,x2,xi1,xi2) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   x2 = 1xTS matrix, input #2
%   xi1 = 1x1 matrix, initial 1 delay states for input #1.
%   xi2 = 1x1 matrix, initial 1 delay states for input #2.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 1x1 matrix, final 1 delay states for input #1.
%   xf2 = 1x1 matrix, final 1 delay states for input #2.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = 1;
x1_step1_gain = 0.0002000200020002;
x1_step1_ymin = -1;

% Input 2
x2_step1_xoffset = 0;
x2_step1_gain = 0.217147240951626;
x2_step1_ymin = -1;

% Layer 1
b1 = [-4.2140100207920517;3.544445025488796;-2.9587486692604994;1.5996734091489935;0.23922670929230536;0.72974641210526958;1.1249144115323511;-1.7673418101263845;3.8975204950673454;-3.2764213622253489];
IW1_1 = [3.4566737749642065;-2.3964526027632718;2.7998797754325562;-1.9009930747757764;-3.7847631089049418;0.62842312891485375;3.0683662429202898;-1.7160147017625325;2.6340667430333005;-0.089051229379475697];
IW1_2 = [-2.8575536775973043;-2.8421725283835699;2.6419761678441334;-3.2814453989366363;-1.3783938093827359;-4.1068555206208632;-2.4065183564252117;-1.2684726678702951;2.5675676392525806;3.4961042075462907];

% Layer 2
b2 = 0.60820427061740567;
LW2_1 = [0.34756266552170545 -0.092554336980371299 0.0084740554045266078 0.0048970620545909149 0.0010808052817643465 0.0022242643935587642 -0.11209880965164869 -0.65899359913964073 0.050937633678360822 0.37213420989453727];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 0.217147240951626;
y1_step1_xoffset = 0;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
xd1 = [xd1 zeros(1,1)];

% Input 2 Delay States
xd2 = mapminmax_apply(xi2,x2_step1_gain,x2_step1_xoffset,x2_step1_ymin);
xd2 = [xd2 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Input 2
    xd2(:,xdts) = mapminmax_apply(x2(:,ts),x2_step1_gain,x2_step1_xoffset,x2_step1_ymin);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-1-1,2)+1),1,1);
    tapdelay2 = reshape(xd2(:,mod(xdts-1-1,2)+1),1,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
xf2 = [xi2(:,xits) x2(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
